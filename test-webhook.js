#!/usr/bin/env node

// Simple test script to send test articles to your webhook
// Usage: node test-webhook.js [test-type]

const https = require('https');

const WEBHOOK_URL = 'https://effective-marketer-dashobard.onrender.com/api/blog/webhook';

// Test payloads
const testPayloads = {
  minimal: {
    title: "Test Article from n8n - " + new Date().toISOString(),
    content: "<h1>Welcome to AI SEO</h1><p>This is a test article generated by our n8n AI agent. It demonstrates the automatic blog creation workflow.</p><h2>Key Benefits</h2><ul><li>Automated content creation</li><li>SEO optimization</li><li>Draft review system</li></ul><p>The content will be automatically converted to markdown and saved as a draft for review.</p>"
  },

  full: {
    title: "Complete Guide to Google Autosuggest Optimization - " + new Date().toLocaleDateString(),
    content: "<h1>Complete Guide to Google Autosuggest Optimization</h1><p>Google Autosuggest has become one of the most powerful tools for brand visibility in 2025. This comprehensive guide will show you how to dominate these suggestions.</p><h2>What is Google Autosuggest?</h2><p>Google Autosuggest is the dropdown feature that appears when users start typing in the search box. These suggestions can significantly impact brand visibility and click-through rates.</p><h2>Key Strategies for 2025</h2><ul><li><strong>Content Optimization:</strong> Create content that aligns with popular search queries</li><li><strong>Social Signals:</strong> Build strong social media presence to influence suggestions</li><li><strong>User Behavior:</strong> Encourage searches for your brand terms</li><li><strong>Technical SEO:</strong> Implement proper schema markup and site structure</li></ul><h2>Implementation Steps</h2><ol><li>Research target keywords and phrases</li><li>Create high-quality content around these terms</li><li>Build social signals and mentions</li><li>Monitor and adjust strategies based on results</li></ol><p>By following these strategies, brands can significantly improve their visibility in Google Autosuggest results, leading to increased organic traffic and brand awareness.</p>",
    category: "Autocomplete SEO",
    tags: ["Google Autosuggest", "SEO", "Brand Visibility", "Search Optimization"],
    featuredImage: "https://images.pexels.com/photos/270637/pexels-photo-270637.jpeg?auto=compress&cs=tinysrgb&w=1200",
    metaDescription: "Learn how to optimize for Google Autosuggest in 2025 with proven strategies for brand visibility and increased organic traffic."
  },

  leadgen: {
    title: "AI-Powered Lead Generation Success Story - " + new Date().toLocaleDateString(),
    content: "<h1>AI-Powered Lead Generation Success Story</h1><p>Discover how one B2B company increased their qualified leads by 300% using AI automation and cold email strategies.</p><h2>The Challenge</h2><p>TechCorp was struggling with manual lead generation processes that were time-consuming and ineffective.</p><h2>The Solution</h2><h3>Cold Email Automation</h3><ul><li>93% of leads from cold outreach</li><li>95% inbox delivery rate</li><li>AI-powered personalization</li><li>Automated follow-up sequences</li></ul><h3>LinkedIn Integration</h3><ul><li>Automated connection requests</li><li>Personalized messaging</li><li>Profile engagement automation</li></ul><h2>Results Achieved</h2><p>Within 90 days, TechCorp saw:</p><ul><li>300% increase in qualified leads</li><li>8.7% response rate (vs 2.1% before)</li><li>2-minute response time with AI agents</li><li>Significantly reduced manual work</li></ul><p>This case study demonstrates the power of combining AI automation with strategic outreach for maximum lead generation results.</p>",
    category: "Lead Generation",
    tags: ["AI", "Lead Generation", "Cold Email", "Case Study", "B2B"],
    featuredImage: "https://images.pexels.com/photos/3184360/pexels-photo-3184360.jpeg?auto=compress&cs=tinysrgb&w=1200",
    metaDescription: "See how AI-powered lead generation helped TechCorp achieve 300% growth in qualified leads with automated cold email and LinkedIn outreach."
  }
};

function sendWebhook(payload) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify(payload);
    
    const url = new URL(WEBHOOK_URL);
    const options = {
      hostname: url.hostname,
      port: url.port || 443,
      path: url.pathname,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: response });
        } catch (error) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

async function runTest(testType = 'minimal') {
  console.log('üöÄ Testing n8n Webhook Integration');
  console.log('üì° Webhook URL:', WEBHOOK_URL);
  console.log('üìù Test Type:', testType);
  console.log('');

  const payload = testPayloads[testType];
  
  if (!payload) {
    console.error('‚ùå Invalid test type. Available types: minimal, full, leadgen');
    process.exit(1);
  }

  console.log('üì§ Sending payload:');
  console.log('   Title:', payload.title);
  console.log('   Category:', payload.category || 'Default');
  console.log('   Tags:', payload.tags || 'Default');
  console.log('');

  try {
    const result = await sendWebhook(payload);
    
    console.log('üì® Response Status:', result.status);
    console.log('üìã Response Data:');
    console.log(JSON.stringify(result.data, null, 2));
    
    if (result.status === 200 && result.data.success) {
      console.log('');
      console.log('‚úÖ SUCCESS! Article created as draft');
      console.log('üÜî Draft ID:', result.data.draftId);
      console.log('üîó Review at: https://effectivemarketer.com/blog-admin');
    } else {
      console.log('');
      console.log('‚ùå FAILED! Check the response above for details');
    }
    
  } catch (error) {
    console.error('üí• Error sending webhook:', error.message);
  }
}

// Get test type from command line arguments
const testType = process.argv[2] || 'minimal';

// Run the test
runTest(testType).catch(console.error);
